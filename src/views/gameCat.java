package views;

import audio.AePlayWave;
import audio.PlayAudio;
import java.awt.Color;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * @author Juampa-Plus ( Juan Paulino Cruz Mejía 04/jun/2017 )
 */
public class gameCat extends javax.swing.JFrame {
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gameCat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gameCat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gameCat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gameCat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gameCat().setVisible(true);
            }
        });

        try {   // Sonido designado para el inicio del programa
            AePlayWave aw;
            URL url = PlayAudio.class.getResource("/audio/Start.wav");
            aw = new AePlayWave(url);
            aw.start();
        } catch (URISyntaxException ex) {
            Logger.getLogger(PlayAudio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    
    private int turno;
    private int nTurno;
    
    public gameCat() {
        initComponents();
        
        txt_jugador1.setEnabled(false); // Desactivará las celdas de texto para que el usuario no pueda modificar el nombre asignado
        txt_jugador2.setEnabled(false); // Desactivará las celdas de texto para que el usuario no pueda modificar el nombre asignado
        btn_detener.setEnabled(false); // Desactivará el botón detener para que el usuario no pueda iteractuar con él
        btn_iniciar.setBackground(Color.WHITE); // colocará el botón de color Gris
        btn_detener.setBackground(Color.WHITE); // colocará el botón de color Gris
        bloqueaTodo(); // Método para bloquear las celdas de los botones del tablero

        turno = 1; // Crea una variable de tipo entero para controlar los turnos de los jugadores

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txt_name_game = new javax.swing.JLabel();
        btn_jugador1 = new javax.swing.JLabel();
        btn_jugador2 = new javax.swing.JLabel();
        txt_jugador1 = new javax.swing.JTextField();
        txt_jugador2 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btn_detener = new javax.swing.JButton();
        btn_iniciar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btn_celda1 = new javax.swing.JButton();
        btn_celda2 = new javax.swing.JButton();
        btn_celda3 = new javax.swing.JButton();
        btn_celda4 = new javax.swing.JButton();
        btn_celda5 = new javax.swing.JButton();
        btn_celda6 = new javax.swing.JButton();
        btn_celda7 = new javax.swing.JButton();
        btn_celda8 = new javax.swing.JButton();
        btn_celda9 = new javax.swing.JButton();
        menu_game = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(800, 600));

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txt_name_game.setBackground(new java.awt.Color(139, 47, 47));
        txt_name_game.setFont(new java.awt.Font("Noto Sans CJK KR Black", 1, 36)); // NOI18N
        txt_name_game.setForeground(new java.awt.Color(251, 241, 241));
        txt_name_game.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt_name_game.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/benito-10.jpeg"))); // NOI18N
        txt_name_game.setText("Cat Game \"Raawr!\"");
        txt_name_game.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txt_name_game.setOpaque(true);

        btn_jugador1.setBackground(new java.awt.Color(195, 89, 89));
        btn_jugador1.setFont(new java.awt.Font("Noto Sans CJK JP Black", 1, 18)); // NOI18N
        btn_jugador1.setForeground(new java.awt.Color(240, 224, 224));
        btn_jugador1.setText("Jugador 1:");
        btn_jugador1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_jugador1.setOpaque(true);

        btn_jugador2.setBackground(new java.awt.Color(195, 89, 89));
        btn_jugador2.setFont(new java.awt.Font("Noto Sans CJK JP Black", 1, 18)); // NOI18N
        btn_jugador2.setForeground(new java.awt.Color(240, 224, 224));
        btn_jugador2.setText("Jugador 2:");
        btn_jugador2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_jugador2.setOpaque(true);

        txt_jugador1.setBackground(new java.awt.Color(254, 254, 254));
        txt_jugador1.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        txt_jugador1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_jugador1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txt_jugador1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt_jugador1MouseClicked(evt);
            }
        });
        txt_jugador1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_jugador1ActionPerformed(evt);
            }
        });

        txt_jugador2.setBackground(new java.awt.Color(254, 254, 254));
        txt_jugador2.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        txt_jugador2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_jugador2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txt_name_game, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_jugador1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_jugador2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_jugador1)
                    .addComponent(txt_jugador2))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(txt_name_game)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_jugador1)
                    .addComponent(txt_jugador1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_jugador2)
                    .addComponent(txt_jugador2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        btn_detener.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stop_1.jpg"))); // NOI18N
        btn_detener.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_detenerMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_detenerMouseEntered(evt);
            }
        });
        btn_detener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_detenerActionPerformed(evt);
            }
        });

        btn_iniciar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Go-2.jpeg"))); // NOI18N
        btn_iniciar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_iniciarMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_iniciarMouseEntered(evt);
            }
        });
        btn_iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_iniciarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btn_iniciar, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                    .addComponent(btn_detener, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(btn_iniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_detener, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(120, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.LINE_END);

        jPanel3.setLayout(new java.awt.GridLayout(3, 3));

        btn_celda1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rreverso-10.jpeg"))); // NOI18N
        btn_celda1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_celda1MouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_celda1MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_celda1MouseEntered(evt);
            }
        });
        btn_celda1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_celda1ActionPerformed(evt);
            }
        });
        jPanel3.add(btn_celda1);

        btn_celda2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rreverso-10.jpeg"))); // NOI18N
        btn_celda2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_celda2MouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_celda2MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_celda2MouseEntered(evt);
            }
        });
        btn_celda2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_celda2ActionPerformed(evt);
            }
        });
        jPanel3.add(btn_celda2);

        btn_celda3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rreverso-10.jpeg"))); // NOI18N
        btn_celda3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_celda3MouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_celda3MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_celda3MouseEntered(evt);
            }
        });
        btn_celda3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_celda3ActionPerformed(evt);
            }
        });
        jPanel3.add(btn_celda3);

        btn_celda4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rreverso-10.jpeg"))); // NOI18N
        btn_celda4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_celda4MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_celda4MouseEntered(evt);
            }
        });
        btn_celda4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_celda4ActionPerformed(evt);
            }
        });
        jPanel3.add(btn_celda4);

        btn_celda5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rreverso-10.jpeg"))); // NOI18N
        btn_celda5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_celda5MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_celda5MouseEntered(evt);
            }
        });
        btn_celda5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_celda5ActionPerformed(evt);
            }
        });
        jPanel3.add(btn_celda5);

        btn_celda6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rreverso-10.jpeg"))); // NOI18N
        btn_celda6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_celda6MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_celda6MouseEntered(evt);
            }
        });
        btn_celda6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_celda6ActionPerformed(evt);
            }
        });
        jPanel3.add(btn_celda6);

        btn_celda7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rreverso-10.jpeg"))); // NOI18N
        btn_celda7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_celda7MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_celda7MouseEntered(evt);
            }
        });
        btn_celda7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_celda7ActionPerformed(evt);
            }
        });
        jPanel3.add(btn_celda7);

        btn_celda8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rreverso-10.jpeg"))); // NOI18N
        btn_celda8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_celda8MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_celda8MouseEntered(evt);
            }
        });
        btn_celda8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_celda8ActionPerformed(evt);
            }
        });
        jPanel3.add(btn_celda8);

        btn_celda9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rreverso-10.jpeg"))); // NOI18N
        btn_celda9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_celda9MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_celda9MouseEntered(evt);
            }
        });
        btn_celda9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_celda9ActionPerformed(evt);
            }
        });
        jPanel3.add(btn_celda9);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Archivo");
        menu_game.add(jMenu1);

        jMenu3.setText("Juego");
        menu_game.add(jMenu3);

        jMenu2.setText("Acerca de");
        menu_game.add(jMenu2);

        setJMenuBar(menu_game);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_detenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_detenerActionPerformed
        // Botón btn_detener, al hacer clic mandará un audio y mostrará un menú de opciones
        try {
            AePlayWave aw;
            URL url = PlayAudio.class.getResource("/audio/stop_1.wav"); // Ejecutará el sonido seleccionado al hacer clic en botón btn_detener 
            aw = new AePlayWave(url);
            aw.start();
        } catch (URISyntaxException ex) {
            Logger.getLogger(PlayAudio.class.getName()).log(Level.SEVERE, null, ex);
        }

        nextMenuDos();  // Método para ejecutar un menú de opciones

    }//GEN-LAST:event_btn_detenerActionPerformed

    private void btn_celda1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_celda1ActionPerformed

        checaTurno(); //Método para cambiar la interacción del color del jugador dependiendo el turno

        if (!btn_celda1.getActionCommand().isEmpty()) { // Verifica si el botón no tiene ningún valor asignado, en caso de que sí ejecuta un sonido y no permite modificar el valor

            soundRestring();    // Método para ejecutar el sonido predeterminado para el error de insercción de imagen

            return;
        } // sí la condición no se cumple continua ejecutando

        soundMew(); // Método que ejecutará el sonido predeterminado para la insercción de un valor y del cambio de imagen

        if (turno == 1) { // Verifica el turno en que está el juego, si es el turno 1, se colocará la imagen "x"
            btn_celda1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/x.png")));
            turno = 2; // Modificará el turno para que se cambie al turno 2
            btn_celda1.setActionCommand("1");   // Asigna un valor al botón para que se pueda hacer la comparación futura y determinar el valor
        } else {          // Si es el turno 2, se colocará la imagen "o"
            btn_celda1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/o.png")));
            turno = 1; // Modificará el turno para que se cambie al turno 1
            btn_celda1.setActionCommand("2");   // Asigna un valor al botón para que se pueda hacer la comparación futura y determinar el valor
        }

        win(); // Método que determinará si es que existe un ganador, en caso de que sí mostrará el ganador
        checaTurno();   //Método para cambiar la interacción del color del jugador dependiendo el turno

    }//GEN-LAST:event_btn_celda1ActionPerformed

    private void btn_celda2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_celda2ActionPerformed

        checaTurno();   //Método para cambiar la interacción del color del jugador dependiendo el turno

        if (!btn_celda2.getActionCommand().isEmpty()) { // Verifica si el botón no tiene ningún valor asignado, en caso de que sí ejecuta un sonido y no permite modificar el valor

            soundRestring();    // Método para ejecutar el sonido predeterminado para el error de insercción de imagen

            return; // Terminará la ejecución del botón
        } // sí la condición no se cumple continua ejecutando

        soundMew(); // Método que ejecutará el sonido predeterminado para la insercción de un valor y del cambio de imagen

        if (turno == 1) {   // Verifica el turno en que está el juego, si es el turno 1, se colocará la imagen "x"
            btn_celda2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/x.png")));
            turno = 2;  // Modificará el turno para que se cambie al turno 2
            btn_celda2.setActionCommand("1");   // Asigna un valor al botón para que se pueda hacer la comparación futura y determinar el valor
        } else {    // Si es el turno 2, se colocará la imagen "o"
            btn_celda2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/o.png")));
            turno = 1;  // Modificará el turno para que se cambie al turno 1
            btn_celda2.setActionCommand("2");   // Asigna un valor al botón para que se pueda hacer la comparación futura y determinar el valor
        }

        win();  // Método que determinará si es que existe un ganador, en caso de que sí mostrará el ganador
        checaTurno();   //Método para cambiar la interacción del color del jugador dependiendo el turno
        
    }//GEN-LAST:event_btn_celda2ActionPerformed

    private void btn_celda3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_celda3ActionPerformed

        checaTurno();   //Método para cambiar la interacción del color del jugador dependiendo el turno

        if (!btn_celda3.getActionCommand().isEmpty()) { // Verifica si el botón no tiene ningún valor asignado, en caso de que sí ejecuta un sonido y no permite modificar el valor

            soundRestring();    // Método para ejecutar el sonido predeterminado para el error de insercción de imagen

            return; // Terminará la ejecución del botón
        }   // sí la condición no se cumple continua ejecutando

        soundMew(); // Método que ejecutará el sonido predeterminado para la insercción de un valor y del cambio de imagen

        if (turno == 1) {   // Verifica el turno en que está el juego, si es el turno 1, se colocará la imagen "x"
            btn_celda3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/x.png")));
            turno = 2;  // Modificará el turno para que se cambie al turno 2
            btn_celda3.setActionCommand("1");   // Asigna un valor al botón para que se pueda hacer la comparación futura y determinar el valor
        } else {    // Si es el turno 2, se colocará la imagen "o"
            btn_celda3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/o.png")));
            turno = 1;  // Modificará el turno para que se cambie al turno 1
            btn_celda3.setActionCommand("2");   // Asigna un valor al botón para que se pueda hacer la comparación futura y determinar el valor
        }

        win();  // Método que determinará si es que existe un ganador, en caso de que sí mostrará el ganador
        checaTurno();   //Método para cambiar la interacción del color del jugador dependiendo el turno

    }//GEN-LAST:event_btn_celda3ActionPerformed

    private void btn_celda4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_celda4ActionPerformed

        checaTurno();   //Método para cambiar la interacción del color del jugador dependiendo el turno

        if (!btn_celda4.getActionCommand().isEmpty()) { // Verifica si el botón no tiene ningún valor asignado, en caso de que sí ejecuta un sonido y no permite modificar el valor

            soundRestring();    // Método para ejecutar el sonido predeterminado para el error de insercción de imagen

            return; // Terminará la ejecución del botón
        }   // sí la condición no se cumple continua ejecutando

        soundMew(); // Método que ejecutará el sonido predeterminado para la insercción de un valor y del cambio de imagen

        if (turno == 1) {   // Verifica el turno en que está el juego, si es el turno 1, se colocará la imagen "x"
            btn_celda4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/x.png")));
            turno = 2;  // Modificará el turno para que se cambie al turno 2
            btn_celda4.setActionCommand("1");   // Asigna un valor al botón para que se pueda hacer la comparación futura y determinar el valor
        } else {    // Si es el turno 2, se colocará la imagen "o"
            btn_celda4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/o.png")));
            turno = 1;  // Modificará el turno para que se cambie al turno 1
            btn_celda4.setActionCommand("2");   // Asigna un valor al botón para que se pueda hacer la comparación futura y determinar el valor
        }

        win();  // Método que determinará si es que existe un ganador, en caso de que sí mostrará el ganador
        checaTurno();   //Método para cambiar la interacción del color del jugador dependiendo el turno

    }//GEN-LAST:event_btn_celda4ActionPerformed

    private void btn_celda5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_celda5ActionPerformed

        checaTurno();   //Método para cambiar la interacción del color del jugador dependiendo el turno

        if (!btn_celda5.getActionCommand().isEmpty()) { // Verifica si el botón no tiene ningún valor asignado, en caso de que sí ejecuta un sonido y no permite modificar el valor

            soundRestring();    // Método para ejecutar el sonido predeterminado para el error de insercción de imagen

            return; // Terminará la ejecución del botón
        }   // sí la condición no se cumple continua ejecutando

        soundMew(); // Método que ejecutará el sonido predeterminado para la insercción de un valor y del cambio de imagen

        if (turno == 1) {   // Verifica el turno en que está el juego, si es el turno 1, se colocará la imagen "x"
            btn_celda5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/x.png")));
            turno = 2;  // Modificará el turno para que se cambie al turno 2
            btn_celda5.setActionCommand("1");   // Asigna un valor al botón para que se pueda hacer la comparación futura y determinar el valor
        } else {    // Si es el turno 2, se colocará la imagen "o"
            btn_celda5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/o.png")));
            turno = 1;  // Modificará el turno para que se cambie al turno 1
            btn_celda5.setActionCommand("2");   // Asigna un valor al botón para que se pueda hacer la comparación futura y determinar el valor
        }

        win();  // Método que determinará si es que existe un ganador, en caso de que sí mostrará el ganador
        checaTurno();   //Método para cambiar la interacción del color del jugador dependiendo el turno
        
    }//GEN-LAST:event_btn_celda5ActionPerformed

    private void btn_celda6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_celda6ActionPerformed

        checaTurno();   //Método para cambiar la interacción del color del jugador dependiendo el turno

        if (!btn_celda6.getActionCommand().isEmpty()) { // Verifica si el botón no tiene ningún valor asignado, en caso de que sí ejecuta un sonido y no permite modificar el valor

            soundRestring();    // Método para ejecutar el sonido predeterminado para el error de insercción de imagen

            return; // Terminará la ejecución del botón
        }   // sí la condición no se cumple continua ejecutando

        soundMew(); // Método que ejecutará el sonido predeterminado para la insercción de un valor y del cambio de imagen

        if (turno == 1) {   // Verifica el turno en que está el juego, si es el turno 1, se colocará la imagen "x"
            btn_celda6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/x.png")));
            turno = 2;  // Modificará el turno para que se cambie al turno 2
            btn_celda6.setActionCommand("1");   // Asigna un valor al botón para que se pueda hacer la comparación futura y determinar el valor
        } else {    // Si es el turno 2, se colocará la imagen "o"
            btn_celda6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/o.png")));
            turno = 1;  // Modificará el turno para que se cambie al turno 1
            btn_celda6.setActionCommand("2");   // Asigna un valor al botón para que se pueda hacer la comparación futura y determinar el valor
        }

        win();  // Método que determinará si es que existe un ganador, en caso de que sí mostrará el ganador
        checaTurno();   //Método para cambiar la interacción del color del jugador dependiendo el turno
        
    }//GEN-LAST:event_btn_celda6ActionPerformed

    private void btn_celda7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_celda7ActionPerformed

        checaTurno();   //Método para cambiar la interacción del color del jugador dependiendo el turno

        if (!btn_celda7.getActionCommand().isEmpty()) { // Verifica si el botón no tiene ningún valor asignado, en caso de que sí ejecuta un sonido y no permite modificar el valor

            soundRestring();    // Método para ejecutar el sonido predeterminado para el error de insercción de imagen

            return; // Terminará la ejecución del botón
        }   // sí la condición no se cumple continua ejecutando

        soundMew(); // Método que ejecutará el sonido predeterminado para la insercción de un valor y del cambio de imagen

        if (turno == 1) {   // Verifica el turno en que está el juego, si es el turno 1, se colocará la imagen "x"
            btn_celda7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/x.png")));
            turno = 2;  // Modificará el turno para que se cambie al turno 2
            btn_celda7.setActionCommand("1");   // Asigna un valor al botón para que se pueda hacer la comparación futura y determinar el valor
        } else {    // Si es el turno 2, se colocará la imagen "o"
            btn_celda7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/o.png")));
            turno = 1;  // Modificará el turno para que se cambie al turno 1
            btn_celda7.setActionCommand("2");   // Asigna un valor al botón para que se pueda hacer la comparación futura y determinar el valor
        }

        win();  // Método que determinará si es que existe un ganador, en caso de que sí mostrará el ganador
        checaTurno();   //Método para cambiar la interacción del color del jugador dependiendo el turno

    }//GEN-LAST:event_btn_celda7ActionPerformed

    private void btn_celda8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_celda8ActionPerformed

        checaTurno();   //Método para cambiar la interacción del color del jugador dependiendo el turno

        if (!btn_celda8.getActionCommand().isEmpty()) { // Verifica si el botón no tiene ningún valor asignado, en caso de que sí ejecuta un sonido y no permite modificar el valor

            soundRestring();    // Método para ejecutar el sonido predeterminado para el error de insercción de imagen

            return; // Terminará la ejecución del botón
        }   // sí la condición no se cumple continua ejecutando

        soundMew(); // Método que ejecutará el sonido predeterminado para la insercción de un valor y del cambio de imagen

        if (turno == 1) {   // Verifica el turno en que está el juego, si es el turno 1, se colocará la imagen "x"
            btn_celda8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/x.png")));
            turno = 2;  // Modificará el turno para que se cambie al turno 2
            btn_celda8.setActionCommand("1");   // Asigna un valor al botón para que se pueda hacer la comparación futura y determinar el valor
        } else {    // Si es el turno 2, se colocará la imagen "o"
            btn_celda8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/o.png")));
            turno = 1;  // Modificará el turno para que se cambie al turno 1
            btn_celda8.setActionCommand("2");   // Asigna un valor al botón para que se pueda hacer la comparación futura y determinar el valor
        }

        win();  // Método que determinará si es que existe un ganador, en caso de que sí mostrará el ganador
        checaTurno();   //Método para cambiar la interacción del color del jugador dependiendo el turno

    }//GEN-LAST:event_btn_celda8ActionPerformed

    private void btn_celda9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_celda9ActionPerformed

        checaTurno();   //Método para cambiar la interacción del color del jugador dependiendo el turno

        if (!btn_celda9.getActionCommand().isEmpty()) { // Verifica si el botón no tiene ningún valor asignado, en caso de que sí ejecuta un sonido y no permite modificar el valor

            soundRestring();    // Método para ejecutar el sonido predeterminado para el error de insercción de imagen

            return; // Terminará la ejecución del botón
        }   // sí la condición no se cumple continua ejecutando

        soundMew(); // Método que ejecutará el sonido predeterminado para la insercción de un valor y del cambio de imagen

        if (turno == 1) {   // Verifica el turno en que está el juego, si es el turno 1, se colocará la imagen "x"
            btn_celda9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/x.png")));
            turno = 2;  // Modificará el turno para que se cambie al turno 2
            btn_celda9.setActionCommand("1");   // Asigna un valor al botón para que se pueda hacer la comparación futura y determinar el valor
        } else {    // Si es el turno 2, se colocará la imagen "o"
            btn_celda9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/o.png")));
            turno = 1;  // Modificará el turno para que se cambie al turno 1
            btn_celda9.setActionCommand("2");   // Asigna un valor al botón para que se pueda hacer la comparación futura y determinar el valor
        }

        win();  // Método que determinará si es que existe un ganador, en caso de que sí mostrará el ganador
        checaTurno();   //Método para cambiar la interacción del color del jugador dependiendo el turno

    }//GEN-LAST:event_btn_celda9ActionPerformed

    private void btn_iniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_iniciarActionPerformed

        try {   // Ejecutará el sonido determinado para el inicio del programa
            AePlayWave aw;
            URL url = PlayAudio.class.getResource("/audio/start_1.wav");
            aw = new AePlayWave(url);
            aw.start();
        } catch (URISyntaxException ex) {
            Logger.getLogger(PlayAudio.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Creación de la variable jugador tipo cadena para asignar nombre de jugadores
        String jugador = JOptionPane.showInputDialog("Ingrese el nombre del Jugador 1");    // Ejecutará ventana para asignar el nombre al jugador 1
        txt_jugador1.setText(jugador);  // Agigna lo que el usuario ingresó por nombre al cuadro de texto txt_jugador1
        jugador = JOptionPane.showInputDialog("Ingrese el nombre del Jugador 2");   // Ejecutará ventana para asignar el nombre al jugador 2
        txt_jugador2.setText(jugador);  // Agigna lo que el usuario ingresó por nombre al cuadro de texto txt_jugador2
        

        if (!txt_jugador1.getText().isEmpty()) {    // Condición para comprobar que el jugaodor 1, tenga un nombre
            if (!txt_jugador2.getText().isEmpty()) {    // Condición para comprobar que el jugaodor 2, tenga un nombre, en caso de que no no se ejecutará lo siguiente
                btn_celda1.setEnabled(true);    // Pone en uso el botón
                btn_celda1.setBackground(Color.GRAY);   // Asigna el color gris al botón
                btn_celda2.setEnabled(true);    // Pone en uso el botón
                btn_celda2.setBackground(Color.GRAY);   // Asigna el color gris al botón
                btn_celda3.setEnabled(true);    // Pone en uso el botón
                btn_celda3.setBackground(Color.GRAY);   // Asigna el color gris al botón
                btn_celda4.setEnabled(true);    // Pone en uso el botón
                btn_celda4.setBackground(Color.GRAY);   // Asigna el color gris al botón
                btn_celda5.setEnabled(true);    // Pone en uso el botón
                btn_celda5.setBackground(Color.GRAY);   // Asigna el color gris al botón
                btn_celda6.setEnabled(true);    // Pone en uso el botón
                btn_celda6.setBackground(Color.GRAY);   // Asigna el color gris al botón
                btn_celda7.setEnabled(true);    // Pone en uso el botón
                btn_celda7.setBackground(Color.GRAY);   // Asigna el color gris al botón
                btn_celda8.setEnabled(true);    // Pone en uso el botón
                btn_celda8.setBackground(Color.GRAY);   // Asigna el color gris al botón
                btn_celda9.setEnabled(true);    // Pone en uso el botón
                btn_celda9.setBackground(Color.GRAY);   // Asigna el color gris al botón
                btn_detener.setEnabled(true);   // Pone en uso el botón

            }

        }
        //Método para cambiar la interacción del color del jugador dependiendo el turno
        checaTurno();   

    }//GEN-LAST:event_btn_iniciarActionPerformed

    private void txt_jugador1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_jugador1ActionPerformed
    }//GEN-LAST:event_txt_jugador1ActionPerformed

    private void btn_celda1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda1MouseClicked
    }//GEN-LAST:event_btn_celda1MouseClicked

    private void txt_jugador1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_jugador1MouseClicked
    }//GEN-LAST:event_txt_jugador1MouseClicked

    private void btn_celda3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda3MouseClicked
    }//GEN-LAST:event_btn_celda3MouseClicked

    private void btn_celda3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda3MouseEntered
        if (btn_celda3.getActionCommand().isEmpty()) {  // Interacción del botón para que agrande su tamaño y cambie de color al pasar el mouse por él en caso de que esté vacío
            btn_celda3.setSize(125, 146);
            btn_celda3.setBackground(Color.black);
        }
    }//GEN-LAST:event_btn_celda3MouseEntered

    private void btn_celda3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda3MouseExited
        btn_celda3.setSize(121, 142);   // Al que al dejar de pasar el mouse por él regrese a su color y tamaño normal
        btn_celda3.setBackground(Color.GRAY);
    }//GEN-LAST:event_btn_celda3MouseExited

    private void btn_celda1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda1MouseEntered
        if (btn_celda1.getActionCommand().isEmpty()) {  // Interacción del botón para que agrande su tamaño y cambie de color al pasar el mouse por él en caso de que esté vacío
            btn_celda1.setSize(125, 146);
            btn_celda1.setBackground(Color.black);
        }
    }//GEN-LAST:event_btn_celda1MouseEntered

    private void btn_celda1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda1MouseExited
        btn_celda1.setSize(121, 142);   // Al que al dejar de pasar el mouse por él regrese a su color y tamaño normal
        btn_celda1.setBackground(Color.GRAY);
    }//GEN-LAST:event_btn_celda1MouseExited

    private void btn_celda2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda2MouseClicked
    }//GEN-LAST:event_btn_celda2MouseClicked

    private void btn_celda2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda2MouseEntered
        if (btn_celda2.getActionCommand().isEmpty()) {  // Interacción del botón para que agrande su tamaño y cambie de color al pasar el mouse por él en caso de que esté vacío
            btn_celda2.setSize(125, 146);
            btn_celda2.setBackground(Color.black);
        }
    }//GEN-LAST:event_btn_celda2MouseEntered

    private void btn_celda2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda2MouseExited
        btn_celda2.setSize(121, 142);   // Al que al dejar de pasar el mouse por él regrese a su color y tamaño normal
        btn_celda2.setBackground(Color.GRAY);
    }//GEN-LAST:event_btn_celda2MouseExited

    private void btn_celda4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda4MouseEntered
        if (btn_celda4.getActionCommand().isEmpty()) { // Interacción del botón para que agrande su tamaño y cambie de color al pasar el mouse por él en caso de que esté vacío
            btn_celda4.setSize(125, 146);
            btn_celda4.setBackground(Color.black);
        }
    }//GEN-LAST:event_btn_celda4MouseEntered

    private void btn_celda4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda4MouseExited
        btn_celda4.setSize(121, 142);   // Al que al dejar de pasar el mouse por él regrese a su color y tamaño normal
        btn_celda4.setBackground(Color.GRAY);
    }//GEN-LAST:event_btn_celda4MouseExited

    private void btn_celda5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda5MouseEntered
        if (btn_celda5.getActionCommand().isEmpty()) {  // Interacción del botón para que agrande su tamaño y cambie de color al pasar el mouse por él en caso de que esté vacío
            btn_celda5.setSize(125, 146);
            btn_celda5.setBackground(Color.black);
        }
    }//GEN-LAST:event_btn_celda5MouseEntered

    private void btn_celda6MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda6MouseExited
        btn_celda6.setSize(121, 142);   // Al que al dejar de pasar el mouse por él regrese a su color y tamaño normal
        btn_celda6.setBackground(Color.GRAY);
    }//GEN-LAST:event_btn_celda6MouseExited

    private void btn_celda7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda7MouseEntered
        if (btn_celda7.getActionCommand().isEmpty()) {  // Interacción del botón para que agrande su tamaño y cambie de color al pasar el mouse por él en caso de que esté vacío
            btn_celda7.setSize(125, 146);
            btn_celda7.setBackground(Color.black);
        }
    }//GEN-LAST:event_btn_celda7MouseEntered

    private void btn_celda6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda6MouseEntered
        if (btn_celda6.getActionCommand().isEmpty()) {  // Interacción del botón para que agrande su tamaño y cambie de color al pasar el mouse por él en caso de que esté vacío
            btn_celda6.setSize(125, 146);
            btn_celda6.setBackground(Color.black);
        }
    }//GEN-LAST:event_btn_celda6MouseEntered

    private void btn_celda7MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda7MouseExited
        btn_celda7.setSize(121, 142);   // Al que al dejar de pasar el mouse por él regrese a su color y tamaño normal
        btn_celda7.setBackground(Color.GRAY);
    }//GEN-LAST:event_btn_celda7MouseExited

    private void btn_celda8MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda8MouseEntered
        if (btn_celda8.getActionCommand().isEmpty()) {  // Interacción del botón para que agrande su tamaño y cambie de color al pasar el mouse por él en caso de que esté vacío
            btn_celda8.setSize(125, 146);
            btn_celda8.setBackground(Color.black);
        }
    }//GEN-LAST:event_btn_celda8MouseEntered

    private void btn_celda8MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda8MouseExited
        btn_celda8.setSize(121, 142);   // Al que al dejar de pasar el mouse por él regrese a su color y tamaño normal
        btn_celda8.setBackground(Color.GRAY);
    }//GEN-LAST:event_btn_celda8MouseExited

    private void btn_celda9MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda9MouseEntered
        if (btn_celda9.getActionCommand().isEmpty()) {  // Interacción del botón para que agrande su tamaño y cambie de color al pasar el mouse por él en caso de que esté vacío
            btn_celda9.setSize(125, 146);
            btn_celda9.setBackground(Color.black);
        }
    }//GEN-LAST:event_btn_celda9MouseEntered

    private void btn_celda9MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda9MouseExited
        btn_celda9.setSize(121, 142);   // Al que al dejar de pasar el mouse por él regrese a su color y tamaño normal
        btn_celda9.setBackground(Color.GRAY);
    }//GEN-LAST:event_btn_celda9MouseExited

    private void btn_celda5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_celda5MouseExited
        btn_celda5.setSize(121, 142);   // Al que al dejar de pasar el mouse por él regrese a su color y tamaño normal
        btn_celda5.setBackground(Color.GRAY);
    }//GEN-LAST:event_btn_celda5MouseExited

    private void btn_iniciarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_iniciarMouseEntered
        btn_iniciar.setSize(148, 164);  // Interacción del botóm para cambiar el tamaño y color al pasar el mouse por él
        btn_iniciar.setBackground(Color.BLACK);
    }//GEN-LAST:event_btn_iniciarMouseEntered

    private void btn_iniciarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_iniciarMouseExited
        btn_iniciar.setSize(143, 157);  // Al que al dejar de pasar el mouse por él regrese a su color y tamaño normal
        btn_iniciar.setBackground(Color.WHITE);
    }//GEN-LAST:event_btn_iniciarMouseExited

    private void btn_detenerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_detenerMouseEntered
        btn_detener.setSize(148, 164);  // Interacción del botóm para cambiar el tamaño y color al pasar el mouse por él
        btn_detener.setBackground(Color.BLACK);
    }//GEN-LAST:event_btn_detenerMouseEntered

    private void btn_detenerMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_detenerMouseExited
        btn_detener.setSize(144, 158);  // Al que al dejar de pasar el mouse por él regrese a su color y tamaño normal
        btn_detener.setBackground(Color.WHITE);
    }//GEN-LAST:event_btn_detenerMouseExited

    private boolean testWin() { // Método para comprobar si existe un ganador
        nTurno++;   // Contador de los turnos que se han jugado
        
        // Sí los botones btn_celda1, btn_celda1 y btn_celda1 tienen el mismo valor, el ganador será de quien le pertenezca el turno
        if (btn_celda1.getActionCommand().equals(btn_celda2.getActionCommand()) && btn_celda1.getActionCommand().equals(btn_celda3.getActionCommand()) && !btn_celda3.getActionCommand().isEmpty()) {
            btn_celda1.setBackground(Color.RED);    // Cambiará los botnoes a color rojo
            btn_celda2.setBackground(Color.RED);
            btn_celda3.setBackground(Color.RED);
            return true;// Si no hay ganador se termina la condición
        }
        // Sí los botones btn_celda4, btn_celda5 y btn_celda6 tienen el mismo valor, el ganador será de quien le pertenezca el turno
        if (btn_celda4.getActionCommand().equals(btn_celda5.getActionCommand()) && btn_celda4.getActionCommand().equals(btn_celda6.getActionCommand()) && !btn_celda6.getActionCommand().isEmpty()) {
            btn_celda4.setBackground(Color.RED);    // Cambiará los botnoes a color rojo
            btn_celda5.setBackground(Color.RED);
            btn_celda6.setBackground(Color.RED);
            return true;// Si no hay ganador se termina la condición
        }
        // Sí los botones btn_celda7, btn_celda8 y btn_celda9 tienen el mismo valor, el ganador será de quien le pertenezca el turno
        if (btn_celda7.getActionCommand().equals(btn_celda8.getActionCommand()) && btn_celda7.getActionCommand().equals(btn_celda9.getActionCommand()) && !btn_celda9.getActionCommand().isEmpty()) {
            btn_celda7.setBackground(Color.RED);    // Cambiará los botnoes a color rojo
            btn_celda8.setBackground(Color.RED);
            btn_celda9.setBackground(Color.RED);
            return true;// Si no hay ganador se termina la condición
        }
        // Sí los botones btn_celda1, btn_celda4 y btn_celda7 tienen el mismo valor, el ganador será de quien le pertenezca el turno
        if (btn_celda1.getActionCommand().equals(btn_celda4.getActionCommand()) && btn_celda1.getActionCommand().equals(btn_celda7.getActionCommand()) && !btn_celda7.getActionCommand().isEmpty()) {
            btn_celda1.setBackground(Color.RED);    // Cambiará los botnoes a color rojo
            btn_celda4.setBackground(Color.RED);
            btn_celda7.setBackground(Color.RED);
            return true;// Si no hay ganador se termina la condición
        }
        // Sí los botones btn_celda2, btn_celda5 y btn_celda8 tienen el mismo valor, el ganador será de quien le pertenezca el turno
        if (btn_celda2.getActionCommand().equals(btn_celda5.getActionCommand()) && btn_celda2.getActionCommand().equals(btn_celda8.getActionCommand()) && !btn_celda8.getActionCommand().isEmpty()) {
            btn_celda2.setBackground(Color.RED);    // Cambiará los botnoes a color rojo
            btn_celda5.setBackground(Color.RED);
            btn_celda8.setBackground(Color.RED);
            return true;// Si no hay ganador se termina la condición
        }
        // Sí los botones btn_celda3, btn_celda6 y btn_celda9 tienen el mismo valor, el ganador será de quien le pertenezca el turno
        if (btn_celda3.getActionCommand().equals(btn_celda6.getActionCommand()) && btn_celda3.getActionCommand().equals(btn_celda9.getActionCommand()) && !btn_celda9.getActionCommand().isEmpty()) {
            btn_celda3.setBackground(Color.RED);    // Cambiará los botnoes a color rojo
            btn_celda6.setBackground(Color.RED);
            btn_celda9.setBackground(Color.RED);
            return true;// Si no hay ganador se termina la condición
        }
        // Sí los botones btn_celda1, btn_celda5 y btn_celda9 tienen el mismo valor, el ganador será de quien le pertenezca el turno
        if (btn_celda1.getActionCommand().equals(btn_celda5.getActionCommand()) && btn_celda1.getActionCommand().equals(btn_celda9.getActionCommand()) && !btn_celda9.getActionCommand().isEmpty()) {
            btn_celda1.setBackground(Color.RED);    // Cambiará los botnoes a color rojo
            btn_celda5.setBackground(Color.RED);
            btn_celda9.setBackground(Color.RED);
            return true;// Si no hay ganador se termina la condición
        }
        // Sí los botones btn_celda3, btn_celda5 y btn_celda7 tienen el mismo valor, el ganador será de quien le pertenezca el turno
        if (btn_celda3.getActionCommand().equals(btn_celda5.getActionCommand()) && btn_celda3.getActionCommand().equals(btn_celda7.getActionCommand()) && !btn_celda7.getActionCommand().isEmpty()) {
            btn_celda3.setBackground(Color.RED);    // Cambiará los botnoes a color rojo
            btn_celda5.setBackground(Color.RED);
            btn_celda7.setBackground(Color.RED);
            return true;    // Si no hay ganador se termina la condición
        }
        if (nTurno == 9) { // Si no hubo un ganador se ejecuta lo siguiente

            soundFail(); // Sonido designado para mostrar el menú

            JOptionPane.showMessageDialog(null, "*** Es Un Empate ***");

            soundFail();    // Sonido designado para mostrar el menú

            nextMenu();     // Método que contiene un menú de opciones
        }
        return false;   // Sino se cumple la condición no realiza ninguna acción
    }

    private void checaTurno() { // Método para cambiar color interactuando entre turno y turno
        if (turno == 1) {   // Si el turno es 1 el botón btn_jugador1 se pondrá rojo y el btn_jugador2 de color gris
            btn_jugador1.setBackground(Color.RED);
            btn_jugador2.setBackground(Color.GRAY);
        }
        if (turno == 2) {   // Si el turno es 2 el botón btn_jugador2 se pondrá azul y el btn_jugador1 de color gris
            btn_jugador2.setBackground(Color.BLUE);
            btn_jugador1.setBackground(Color.GRAY);
        }
    }

    private void bloqueaTodo() {    // Bloqueará todos los botones para que el usuario no pueda interactuar con ellos
        btn_celda1.setEnabled(false);
        btn_celda2.setEnabled(false);
        btn_celda3.setEnabled(false);
        btn_celda4.setEnabled(false);
        btn_celda5.setEnabled(false);
        btn_celda6.setEnabled(false);
        btn_celda7.setEnabled(false);
        btn_celda8.setEnabled(false);
        btn_celda9.setEnabled(false);

    }

    private void nextMenu() {   // Método que contiene el menú en caso de que haya un ganador
        Object resp = JOptionPane.showInputDialog(null, "¿QUÉ DESEA HACER?", "** JUEGO TERMINADO ** ", JOptionPane.QUESTION_MESSAGE, null,
                new Object[]{"Reiniciar Juego", "Salir"}, "Seleccione");

        if (resp.equals("Reiniciar Juego")) {   // Terminará e iniciará un juego nuevo
            this.setVisible(false); // Borrará los datos y quitará la ventana del juego
            gameCat.main(null); // Reiniciará el juego
        }
        if (resp.equals("Salir")) {
            System.exit(0); // Fin de ejecución del programa
        }
    }

    private void nextMenuDos() {    // Método que contiene el menú en caso de que haya un clic el botón btn_detener
        Object resp = JOptionPane.showInputDialog(null, "¿QUÉ DESEA HACER?", "** SE DETUVO EL JUEGO ** ", JOptionPane.QUESTION_MESSAGE, null,
            new Object[]{"Continuar", "Reiniciar Juego", "Salir"}, "Seleccione");

        if (resp.equals("Continuar")) {
        }
        if (resp.equals("Reiniciar Juego")) {   // Terminará e iniciará un juego nuevo
            this.setVisible(false); // Borrará los datos y quitará la ventana del juego
            gameCat.main(null); // Reiniciará el juego
        }
        if (resp.equals("Salir")) {
            System.exit(0); // Fin de ejecución del programa
        }
    }

    private void win() { // Método para mostrar el ganador en caso de que exista 
        if (turno != 1) {   // Si el turno no le corresponde al 1 se ejecuta lo siguiente
            if (testWin()) {
                try {   // Ejecutará el sonido determinado en caso de un triunfo
                    AePlayWave aw;
                    URL url = PlayAudio.class.getResource("/audio/SounWin.wav");
                    aw = new AePlayWave(url);
                    aw.start();
                } catch (URISyntaxException ex) {
                    Logger.getLogger(PlayAudio.class.getName()).log(Level.SEVERE, null, ex);
                }
                // Mostrará una ventana afirmando que el ganador es el jugador 1
                JOptionPane.showMessageDialog(null, "EL ganador es " + txt_jugador1.getText());
                soundFail();    // Sonido designado para mostrar el menú
                nextMenu(); // Ejecutará el menú contenido en el método
            }

        }
        if (turno != 2) { // Si el turno no le corresponde al 2 se ejecuta lo siguiente
            if (testWin()) {    // Ejecutará el sonido determinado en caso de un triunfo
                try {
                    AePlayWave aw;
                    URL url = PlayAudio.class.getResource("/audio/SounWin.wav");
                    aw = new AePlayWave(url);
                    aw.start();
                } catch (URISyntaxException ex) {
                    
                    Logger.getLogger(PlayAudio.class.getName()).log(Level.SEVERE, null, ex);
                    
                }
                // Mostrará una ventana afirmando que el ganador es el jugador 2
                JOptionPane.showMessageDialog(null, "El ganador es " + txt_jugador2.getText());
                soundFail();    // Ejecutará el sonido determinado para el menú
                nextMenu(); // Ejecutará el menú contenido en el método
            }

        }

    }

    private void soundFail() {  // Sonido designado para mostrar el menú
        try {
            AePlayWave aw;
            URL url = PlayAudio.class.getResource("/audio/fail.wav");
            aw = new AePlayWave(url);
            aw.start();
        } catch (URISyntaxException ex) {
            Logger.getLogger(PlayAudio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void soundRestring() {  // Sonido designado para mostrar el error en la insersión de dato de un botón
        try {
            AePlayWave aw;
            URL url = PlayAudio.class.getResource("/audio/Banana.wav");
            aw = new AePlayWave(url);
            aw.start();
        } catch (URISyntaxException ex) {
            Logger.getLogger(PlayAudio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void soundMew() {   // Método que ejecutará el sonido predeterminado para la insercción de un valor y del cambio de imagen
        try {
            AePlayWave aw;
            URL url = PlayAudio.class.getResource("/audio/mew1.wav");
            aw = new AePlayWave(url);
            aw.start();
        } catch (URISyntaxException ex) {
            Logger.getLogger(PlayAudio.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_celda1;
    private javax.swing.JButton btn_celda2;
    private javax.swing.JButton btn_celda3;
    private javax.swing.JButton btn_celda4;
    private javax.swing.JButton btn_celda5;
    private javax.swing.JButton btn_celda6;
    private javax.swing.JButton btn_celda7;
    private javax.swing.JButton btn_celda8;
    private javax.swing.JButton btn_celda9;
    private javax.swing.JButton btn_detener;
    private javax.swing.JButton btn_iniciar;
    private javax.swing.JLabel btn_jugador1;
    private javax.swing.JLabel btn_jugador2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JMenuBar menu_game;
    private javax.swing.JTextField txt_jugador1;
    private javax.swing.JTextField txt_jugador2;
    private javax.swing.JLabel txt_name_game;
    // End of variables declaration//GEN-END:variables
}   // Fin de programa.
